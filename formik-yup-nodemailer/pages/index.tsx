import { ErrorMessage, Field, Form, Formik, FormikHelpers } from "formik";
import type { NextPage } from "next";
import Head from "next/head";
import React from "react";
import { date, number, object, string } from "yup";
import styles from "../assets/Home.module.scss";
import TextArea from "../components/TextArea";
import { Values } from "../types";

const initialValues: Values = {
  firstName: "John",
  lastName: "Doe",
  email: "john@acme.com",
  date: new Date().toISOString().split("T")[0],
  size: 1,
  message: "",
};

const validationSchema = object({
  firstName: string().min(1).max(32).required().label("First name"),
  lastName: string().min(1).max(32).required().label("Last name"),
  email: string().email().required().label("Email"),
  date: date().min(new Date().toISOString().split("T")[0]),
  size: number().min(1).max(16).label("Size"),
  message: string().max(200).label("Message"),
});

const inputs = [
  {
    id: "firstName",
    label: "First name",
    type: "text",
  },
  {
    id: "lastName",
    label: "Last name",
    type: "text",
  },
  {
    id: "email",
    label: "Email",
    type: "email",
  },
  {
    id: "date",
    label: "Date",
    type: "date",
  },
  {
    id: "size",
    label: "Size",
    type: "number",
  },
  {
    id: "message",
    label: "Message",
    type: "textarea",
  },
];

const Home: NextPage = () => {
  const onSubmit = async (values: Values, helpers: FormikHelpers<Values>) => {
    try {
      const response = await fetch("/api", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(values),
      });
      const { status, message, data } = await response.json();
      if (!status) throw new Error(message);
    } catch (error) {
      if (error instanceof Error) {
        helpers.setStatus(error.message);
      }
    }
    helpers.setSubmitting(false);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Formik Yup Nodemailer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.root}>
        <Formik
          initialValues={initialValues}
          validationSchema={validationSchema}
          onSubmit={onSubmit}
        >
          {({ status, isSubmitting }) => (
            <Form>
              {inputs.map(({ label, id, type }) => (
                <div key={id}>
                  <div>
                    <label htmlFor={id}>{label}</label>
                  </div>
                  {type !== "textarea" ? (
                    <Field id={id} name={id} type={type} />
                  ) : (
                    <TextArea id={id} name={id} />
                  )}
                  <div className={styles.error}>
                    <ErrorMessage name={id} />
                  </div>
                </div>
              ))}
              <div className={styles.error}>{status}</div>
              <button type="submit">
                {isSubmitting ? "Submitting" : "Submit"}
              </button>
            </Form>
          )}
        </Formik>
      </main>
    </div>
  );
};

export default Home;
